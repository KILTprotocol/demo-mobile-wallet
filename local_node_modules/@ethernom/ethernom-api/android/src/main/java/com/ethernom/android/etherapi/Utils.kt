package com.ethernom.android.etherapi

import java.sql.Types
import java.util.*

object Utils {
    fun ByteToByteArray(bytes: Array<Byte>): ByteArray {
        val byteObjects = ByteArray(bytes.size)
        var i = 0

        for (b in bytes) {
            byteObjects[i++] = b // Autoboxing.
        }

        return byteObjects
    }

    fun ByteListToByteArray(`in`: List<Byte>): ByteArray {
        val n = `in`.size
        val ret = ByteArray(n)

        for (i in 0 until n) {
            ret[i] = `in`[i]
        }

        return ret
    }

    fun GetDelimitedString(data: String): List<Byte> { // Construct payload as series of delimited strings
        val payload: MutableList<Byte> = ArrayList()

        if (data.length == 0) {
            payload.add(0.toByte())
        } else {
            val cc = 0

            for (j in 0 until data.length) {
                val c = data[j]

                if (c.toInt() != Types.NULL) {
                    val b = c.toByte()
                    payload.add(b)
                }
            }

            if (cc < data.length - 1) {
                payload.add(EtherTransportProtocol.DELIMITER.toByte())
            }
        }

        return payload
    }

    fun GetEndedString(data: String): List<Byte> { // Construct payload as series of delimited strings
        val payload: MutableList<Byte> = ArrayList()

        if (data.length == 0) {
            payload.add(0.toByte())
        } else {
            val cc = 0

            for (j in 0 until data.length) {
                val c = data[j]

                if (c.toInt() != Types.NULL) {
                    val b = c.toByte()
                    payload.add(b)
                }
            }

            if (cc < data.length - 1) {
                payload.add(0.toByte())
            }
        }

        return payload
    }
}