package com.ethernom.android.etherapi.linkLayer

import android.content.Context
import com.ethernom.android.etherapi.CardInfo
import com.ethernom.android.etherapi.DiscoverServiceListener
import com.ethernom.android.etherapi.EtherEncHeader

interface EtherCommAdapter {
    var _scanAllowDuplicates: Boolean
    var _scanMSecsTimeout: Long
    var _scanStopScanOnWrite: Boolean
    var _foundCards: ArrayList<CardInfo>
    var _cardEventListener: CardListener?
    var _discoverServiceEventListener: DiscoverServiceListener?
    var _adapterEventListener: AdapterListener?

    fun GetInterface(): TInterface

    fun GetAdapterAddress(): String
    fun SetAdapterAddress(address: String)

    fun Discover()
    fun StopDiscovery()
    fun CardOpen(cardInfo: CardInfo)
    fun CardClose()

    fun Init(servicePort: Byte, secsTimeout: Long, allowDuplicates: Boolean, stopScanOnWrite: Boolean, context: Context)
    fun Init_DFU(UUID: String, secsTimeout: Long, allowDuplicates: Boolean, stopScanOnWrite: Boolean, context: Context)
    fun WriteToCard(buffer: ByteArray)
    fun WriteDataToCardHasEncryption(data: ByteArray, writeCallback: (tvalue: ByteArray) -> Unit)
    fun WriteToCardEnc(data: ByteArray, encHeader: EtherEncHeader, writeCallback: (tvalue: ByteArray) -> Unit)

    fun SetAdapterEventListener(listener: AdapterListener) {
        this._adapterEventListener = listener
    }

    fun SetCardEventListener(listener: CardListener) {
        this._cardEventListener = listener
    }

    fun SetDiscoverServiceEventListener(listener: DiscoverServiceListener) {
        this._discoverServiceEventListener = listener
    }

    companion object {
        val EtherCommAdapter.SCAN_FOREVER: Int
            get() = -1

        val EtherCommAdapter._scanAllowDuplicates: Boolean
            get() {
                return false
            }
    }
}