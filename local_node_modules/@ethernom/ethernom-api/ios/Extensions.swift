//
//  Extensions.swift
//  EthernomPasswordManagerMobile
//
//  Created by Fred Covely on 1/12/20.
//  Copyright Â© 2020 Facebook. All rights reserved.
//

import Foundation

extension String {
  func toJSON() -> Any? {
    guard let data = self.data(using: .utf8, allowLossyConversion: false) else { return nil }
    return try? JSONSerialization.jsonObject(with: data, options: .mutableContainers)
  }
  
  func parseJSONString()-> Any? {

    let data = self.data(using: String.Encoding.utf8, allowLossyConversion: false)

      if let jsonData = data {
          // Will return an object or nil if JSON decoding fails
        return try? JSONSerialization.jsonObject(with: jsonData, options: JSONSerialization.ReadingOptions.mutableContainers) as AnyObject?
      } else {
          // Lossless conversion of the string was not possible
          return nil
      }
  }
  func subString(from: Int, to: Int) -> String {
    let startIndex = self.index(self.startIndex, offsetBy: from)
    let endIndex = self.index(self.startIndex, offsetBy: to)
    return String(self[startIndex...endIndex])
  }
}

extension Array{
  func toJSON() -> String? {
    guard let data = try? JSONSerialization.data(withJSONObject: self, options: []) else {
          return nil
      }
      return String(data: data, encoding: String.Encoding.utf8)
  }
}
 func ParseEncryptedHeader(payload : [UInt8])->([UInt8],[UInt8], [UInt8]){
  var transportHdr = CopyBytes(payload: payload, startIdx: 0, count: Int( EtherTransportProtocol.ETH_BLE_HEADER_SIZE))
  let encHdr = CopyBytes(payload: payload, startIdx: UInt8(EtherTransportProtocol.ETH_BLE_HEADER_SIZE), count: Int(EtherTransportProtocol.ETH_BLE_ENC_HEADER_SIZE))
   let ct = Int(payload.count - 24)
   
   var appPayload = [UInt8]()
   
   if (ct != 0){
     appPayload = CopyBytes(payload: payload, startIdx: TRANSPORT_PLUS_ENC_HEADER_SIZE, count: ct)
  // no need to do this as payload is decrypted later   transportHdr.append(contentsOf: appPayload)
   }
    return (encHdr, transportHdr, appPayload)
}

func CopyBytes(payload : [UInt8], startIdx: UInt8, count : Int)-> [UInt8]{
  var out : [UInt8] = Array()
  
  for i in 0...count-1{
    let idx : Int = Int(startIdx) + Int(i)
    out.append(payload[idx])
  }
  return out
}

extension String {

    /// Create `Data` from hexadecimal string representation
    ///
    /// This creates a `Data` object from hex string. Note, if the string has any spaces or non-hex characters (e.g. starts with '<' and with a '>'), those are ignored and only hex characters are processed.
    ///
    /// - returns: Data represented by this hexadecimal string.

    var toData: Data? {
        var data = Data(capacity: self.count / 2)

        let regex = try! NSRegularExpression(pattern: "[0-9a-f]{1,2}", options: .caseInsensitive)
        regex.enumerateMatches(in: self, range: NSRange(startIndex..., in: self)) { match, _, _ in
            let byteString = (self as NSString).substring(with: match!.range)
            let num = UInt8(byteString, radix: 16)!
            data.append(num)
        }

        guard data.count > 0 else { return nil }

        return data
    }
    func toBase64() -> String? {
        guard let data = self.data(using: String.Encoding.utf8) else {
            return nil
        }

        return data.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        
    }
}

extension Sequence where Element == UInt8 {
    var data: Data { .init(self) }
    var hexa: String { map { .init(format: "%02x", $0) }.joined() }
    var hexaSpaced: String { map { .init(format: "%02x ", $0) }.joined() }
}

extension StringProtocol {
  var hexa: [UInt8] {
    var startIndex = self.startIndex
    return stride(from: 0, to: count, by: 2).compactMap { _ in
      let endIndex = index(startIndex, offsetBy: 2, limitedBy: self.endIndex) ?? self.endIndex
      defer { startIndex = endIndex }
      return UInt8(self[startIndex..<endIndex], radix: 16)
    }
  }
}

extension Data {
    var hexDescription: String {
        return reduce("") {$0 + String(format: "%02x", $1)}
    }
}

extension Data {
  struct HexEncodingOptions: OptionSet {
    let rawValue: Int
    static let upperCase = HexEncodingOptions(rawValue: 1 << 0)
  }
  
  func hexEncodedString(options: HexEncodingOptions = []) -> String {
    let format = options.contains(.upperCase) ? "%02hhX" : "%02hhx"
    return map { String(format: format, $0) }.joined()
  }
}
